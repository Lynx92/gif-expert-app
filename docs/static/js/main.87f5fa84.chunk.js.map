{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","gif","id","title","images","downsized_medium","useFetchGifs","loading","state","setstate","useEffect","then","imgs","GifGridItem","className","src","alt","GifGrid","img","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMA6BeA,EA1BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACrB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAUA,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,SACbP,GAAc,SAACQ,GAAD,OAAWN,GAAX,mBAA0BM,OACxCL,EAAc,MAKhB,SACE,uBACEM,KAAK,OACLC,MAAOR,EACPS,SAAU,SAACN,GAAD,OAAOF,EAAcE,EAAEO,OAAOF,a,+BCnBnCG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACN,4CACTC,EAFe,iDAEiCC,UAAUH,IAF3C,SAGHI,MAAMF,EAFT,6CADM,cAGfG,EAHe,gBAIEA,EAAIC,OAJN,uBAIbC,EAJa,EAIbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVjB,kBAcdM,GAdc,4CAAH,sDCqBLO,EAlBM,SAAC,GAAkB,IAAhBf,EAAe,EAAfA,SACtB,EAA0Bb,mBAAS,CACjCoB,KAAM,GACNS,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACRpB,EAAQC,GAAUoB,MAAK,SAACC,GACtBH,EAAS,CACPX,KAAMc,EACNL,SAAS,SAGZ,CAAChB,IAEGiB,GCPMK,MATf,YAAyC,EAAlBX,GAAmB,IAAfC,EAAc,EAAdA,MAAOV,EAAO,EAAPA,IAChC,OACE,sBAAKqB,UAAU,6CAAf,UACE,qBAAKC,IAAKtB,EAAKuB,IAAKb,IACpB,4BAAIA,QCgBKc,EAlBC,SAAC,GAAkB,IAAhB1B,EAAe,EAAfA,SACjB,EAAkCe,EAAaf,GAAjCa,EAAd,EAAQN,KAAcS,EAAtB,EAAsBA,QAEtB,OACE,qCACE,oBAAIO,UAAU,oCAAd,SAAmDvB,IAElDgB,GAAW,mBAAGO,UAAU,mCAAb,wBAEZ,qBAAKA,UAAU,YAAf,SACGV,EAAOJ,KAAI,SAACkB,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIhB,aCOjBiB,EAlBM,WACnB,MAAoCzC,mBAAS,CAAC,iBAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG2C,EAAWpB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,YCTxB8B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.87f5fa84.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim()) {\n      setCategories((cats) => [inputValue, ...cats]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={(e) => setInputValue(e.target.value)}\n      />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","export const getGifs = async (category) => {\n  const apiKey = \"&api_key=xQtHIPggAeAAkkkgyo0VBN7xr9dwycjR\";\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}`;\n  const res = await fetch(url + apiKey);\n  const { data } = await res.json();\n\n  const gifs = data.map((gif) => {\n    return {\n      id: gif.id,\n      title: gif.title,\n      url: gif.images?.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nconst useFetchGifs = ({ category }) => {\n  const [state, setstate] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n      setstate({\n        data: imgs,\n        loading: false,\n      });\n    });\n  }, [category]);\n\n  return state;\n};\n\nexport default useFetchGifs;\n","import React from \"react\";\n\nfunction GifGridItem({ id, title, url }) {\n  return (\n    <div className=\"card animate__animated animate__bounceInUp\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n}\n\nexport default GifGridItem;\n","import React from \"react\";\nimport useFetchGifs from \"../hooks/useFetchGifs\";\nimport GifGridItem from \"./GifGridItem\";\n\nconst GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h2 className=\"animate__animated animate__fadeIn\">{category}</h2>\n\n      {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n\n      <div className=\"card-grid\">\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default GifGrid;\n","import React, { useState } from \"react\";\nimport AddCategory from \"./components/AddCategory\";\nimport GifGrid from \"./components/GifGrid\";\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"Boku no Hero\"]);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"./index.css\";\nimport \"animate.css\"\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}